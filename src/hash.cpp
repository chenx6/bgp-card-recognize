#include <bitset>
#include <cmath>
#include <cstdint>
#include <memory>
#include <vector>

#ifndef DEBUG
#include "emscripten.h"
#endif
#include "jsonxx/json.hpp"
#include <opencv2/opencv.hpp>

#include "hash.h"

using namespace cv;
using namespace std;
using namespace jsonxx;

// DCT_TABLE = [[math.cos(pi_64 * src * dst) for src in range(1, 65, 2)] for dst in range(1, 9)]
const double DCT_TABLE[][32] = {
    {0.9987954562051724,   0.989176509964781,    0.970031253194544,
     0.9415440651830208,   0.9039892931234433,   0.8577286100002721,
     0.8032075314806449,   0.7409511253549591,   0.6715589548470183,
     0.5956993044924335,   0.5141027441932217,   0.4275550934302822,
     0.33688985339222005,  0.24298017990326398,  0.14673047445536175,
     0.049067674327418126, -0.04906767432741801, -0.14673047445536164,
     -0.24298017990326387, -0.33688985339221994, -0.42755509343028186,
     -0.5141027441932217,  -0.5956993044924334,  -0.6715589548470184,
     -0.7409511253549589,  -0.8032075314806448,  -0.857728610000272,
     -0.9039892931234433,  -0.9415440651830207,  -0.970031253194544,
     -0.989176509964781,   -0.9987954562051724},
    {0.9951847266721969,   0.9569403357322088,   0.881921264348355,
     0.773010453362737,    0.6343932841636455,   0.4713967368259978,
     0.29028467725446233,  0.09801714032956077,  -0.09801714032956065,
     -0.29028467725446216, -0.4713967368259977,  -0.6343932841636454,
     -0.773010453362737,   -0.8819212643483549,  -0.9569403357322088,
     -0.9951847266721968,  -0.9951847266721969,  -0.9569403357322089,
     -0.881921264348355,   -0.7730104533627371,  -0.6343932841636459,
     -0.47139673682599786, -0.29028467725446244, -0.09801714032956045,
     0.09801714032956009,  0.29028467725446205,  0.4713967368259976,
     0.6343932841636456,   0.7730104533627367,   0.8819212643483548,
     0.9569403357322088,   0.9951847266721969},
    {0.989176509964781,    0.9039892931234433,  0.7409511253549591,
     0.5141027441932217,   0.24298017990326398, -0.049067674327417786,
     -0.33688985339222016, -0.5956993044924329, -0.803207531480645,
     -0.9415440651830207,  -0.9987954562051724, -0.970031253194544,
     -0.8577286100002721,  -0.6715589548470187, -0.4275550934302825,
     -0.1467304744553623,  0.14673047445536194, 0.42755509343028214,
     0.6715589548470183,   0.857728610000272,   0.9700312531945438,
     0.9987954562051724,   0.9415440651830207,  0.8032075314806447,
     0.595699304492434,    0.3368898533922209,  0.049067674327418154,
     -0.2429801799032645,  -0.5141027441932214, -0.7409511253549593,
     -0.9039892931234431,  -0.989176509964781},
    {0.9807852804032304,   0.8314696123025452,  0.5555702330196023,
     0.19509032201612833,  -0.1950903220161282, -0.555570233019602,
     -0.8314696123025453,  -0.9807852804032304, -0.9807852804032304,
     -0.8314696123025455,  -0.5555702330196022, -0.19509032201612866,
     0.1950903220161283,   0.5555702330196018,  0.8314696123025452,
     0.9807852804032303,   0.9807852804032304,  0.8314696123025455,
     0.5555702330196023,   0.19509032201612878, -0.1950903220161273,
     -0.5555702330196017,  -0.8314696123025451, -0.9807852804032305,
     -0.9807852804032307,  -0.8314696123025456, -0.5555702330196024,
     -0.19509032201612803, 0.1950903220161272,  0.5555702330196016,
     0.8314696123025451,   0.9807852804032304},
    {0.970031253194544,    0.7409511253549591,  0.33688985339222005,
     -0.14673047445536164, -0.5956993044924334, -0.9039892931234431,
     -0.9987954562051724,  -0.8577286100002721, -0.5141027441932218,
     -0.04906767432741803, 0.42755509343028214, 0.8032075314806445,
     0.989176509964781,    0.9415440651830209,  0.6715589548470181,
     0.24298017990326423,  -0.2429801799032645, -0.6715589548470177,
     -0.9415440651830205,  -0.9891765099647811, -0.8032075314806454,
     -0.4275550934302827,  0.04906767432741742, 0.5141027441932228,
     0.8577286100002719,   0.9987954562051724,  0.9039892931234434,
     0.5956993044924335,   0.14673047445536355, -0.33688985339221844,
     -0.7409511253549592,  -0.9700312531945441},
    {0.9569403357322088,   0.6343932841636455,   0.09801714032956077,
     -0.4713967368259977,  -0.8819212643483549,  -0.9951847266721969,
     -0.7730104533627369,  -0.2902846772544633,  0.29028467725446294,
     0.7730104533627367,   0.9951847266721969,   0.881921264348355,
     0.471396736825998,    -0.09801714032955997, -0.6343932841636448,
     -0.9569403357322085,  -0.9569403357322087,  -0.6343932841636454,
     -0.09801714032956069, 0.47139673682599736,  0.8819212643483539,
     0.9951847266721969,   0.7730104533627365,   0.29028467725446194,
     -0.2902846772544609,  -0.7730104533627358,  -0.9951847266721968,
     -0.8819212643483544,  -0.4713967368259983,  0.09801714032956137,
     0.6343932841636445,   0.9569403357322089},
    {0.9415440651830208,   0.5141027441932217,  -0.14673047445536164,
     -0.7409511253549589,  -0.9987954562051724, -0.8032075314806453,
     -0.24298017990326326, 0.42755509343028136, 0.9039892931234434,
     0.9700312531945443,   0.5956993044924332,  -0.04906767432741754,
     -0.6715589548470189,  -0.9891765099647807, -0.8577286100002723,
     -0.336889853392221,   0.3368898533922202,  0.8577286100002719,
     0.9891765099647809,   0.6715589548470196,  0.04906767432742017,
     -0.5956993044924326,  -0.9700312531945441, -0.9039892931234434,
     -0.4275550934302845,  0.24298017990326243, 0.8032075314806447,
     0.9987954562051724,   0.7409511253549601,  0.14673047445536203,
     -0.5141027441932225,  -0.9415440651830215},
    {0.9238795325112867,   0.38268343236508984,  -0.3826834323650897,
     -0.9238795325112867,  -0.9238795325112868,  -0.38268343236509034,
     0.38268343236509,     0.9238795325112865,   0.9238795325112867,
     0.38268343236509045,  -0.3826834323650899,  -0.9238795325112864,
     -0.9238795325112867,  -0.38268343236509056, 0.3826834323650898,
     0.9238795325112864,   0.9238795325112867,   0.38268343236509067,
     -0.38268343236508967, -0.9238795325112864,  -0.9238795325112875,
     -0.3826834323650908,  0.38268343236508956,  0.923879532511287,
     0.9238795325112875,   0.3826834323650909,   -0.38268343236508945,
     -0.923879532511287,   -0.9238795325112876,  -0.382683432365091,
     0.38268343236508934,  0.9238795325112868}};

/// @brief Cut the edge of the card
Mat cut_image(Mat &input) {
  size_t width = input.size().width;
  size_t height = input.size().height;
  size_t sx = int(0 + 1 + width / 4);
  size_t sy = int(0 + 1 + height / 4);
  size_t sWidth = int(width / 2);
  size_t sHeight = int(height / 2);
  return input(Range(sy, sy + sHeight), Range(sx, sx + sWidth));
}

/// @brief Imitate Bestdori's hash function by using DCT algorithm
void dct(size_t length, vector<uint8_t> &gray, vector<double> &ret) {
  constexpr int choose = 8;
  for (size_t y_d = 0; y_d < choose; y_d++) {
    const double *t_y = DCT_TABLE[y_d];
    for (size_t x_d = 0; x_d < choose; x_d++) {
      const double *t_x = DCT_TABLE[x_d];
      double l = 0;
      for (size_t y = 0; y < length; y++)
        for (size_t x = 0; x < length; x++)
          l += t_y[y] * t_x[x] * gray[length * y + x];
      ret[choose * y_d + x_d] = l;
    }
  }
}

/// @brief Hash image function
/// @todo Replace this to more effient version
/// @note This algorithm is not licensed by the origin author
uint64_t hash_(vector<uint8_t> &array) {
  // Process data
  constexpr auto image_width = 32;
  vector<double> res(image_width * 2, 0);
  dct(image_width, array, res);

  // Find the middle number
  vector<double> middle_res = res;
  sort(middle_res.begin(), middle_res.end());
  double middle = middle_res[image_width];

  // Threshould data
  uint64_t vec = 0;
  for (auto &&i : res) {
    vec <<= 1;
    vec += i > middle ? 1 : 0;
  }
  return vec;
}

/// @brief Hash image function (C array version)
uint64_t hash_(uint8_t array[], int length) {
  vector<uint8_t> vec(array, array + length);
  return hash_(vec);
}

/// @brief Compare two vector
/// @return Matching bit count
int cmp_vec(uint64_t v1, uint64_t v2) {
  return 64 - bitset<64>(v1 ^ v2).count();
}

/// @brief Get nearest vector and return its id
/// @param hash_data the card hash json from bestdori
int get_nearest_id(uint64_t vec, json &hash_data) {
  int max_diff = 0, nearest_id = -1;
  for (auto iter = hash_data.begin(); iter != hash_data.end(); iter++) {
    // webassembly need stoull to convert 64bit number...
    uint64_t k = stoull(iter.key(), nullptr, 16);
    int diff = cmp_vec(k, vec);
    if (diff > max_diff) {
      max_diff = diff;
      nearest_id = iter.value().as_int();
    }
  }
  return nearest_id;
}

int get_nearest_id(uint64_t vec, vector<HashCardId> &hash_data) {
  int max_diff = 0, nearest_id = -1;
  for (auto &&i : hash_data) {
    // webassembly need stoull to convert 64bit number...
    int diff = cmp_vec(i.hash_value, vec);
    if (diff > max_diff) {
      max_diff = diff;
      nearest_id = i.card_id;
    }
  }
  return nearest_id;
}